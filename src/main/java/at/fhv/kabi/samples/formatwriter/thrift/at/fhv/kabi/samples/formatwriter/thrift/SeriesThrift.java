/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.fhv.kabi.samples.formatwriter.thrift.at.fhv.kabi.samples.formatwriter.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-02-11")
public class SeriesThrift implements org.apache.thrift.TBase<SeriesThrift, SeriesThrift._Fields>, java.io.Serializable, Cloneable, Comparable<SeriesThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SeriesThrift");

  private static final org.apache.thrift.protocol.TField DEVICEID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ECG_FIELD_DESC = new org.apache.thrift.protocol.TField("ecg", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField BLOODPRESSURE_FIELD_DESC = new org.apache.thrift.protocol.TField("bloodpressure", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField HEARTRATE_FIELD_DESC = new org.apache.thrift.protocol.TField("heartrate", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TIMEZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timezone", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SeriesThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SeriesThriftTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String deviceid; // required
  public int model; // required
  public @org.apache.thrift.annotation.Nullable EcgThrift ecg; // required
  public @org.apache.thrift.annotation.Nullable BloodPressureThrift bloodpressure; // required
  public int heartrate; // required
  public long timestamp; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String timezone; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICEID((short)1, "deviceid"),
    MODEL((short)2, "model"),
    ECG((short)3, "ecg"),
    BLOODPRESSURE((short)4, "bloodpressure"),
    HEARTRATE((short)5, "heartrate"),
    TIMESTAMP((short)6, "timestamp"),
    TIMEZONE((short)7, "timezone");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICEID
          return DEVICEID;
        case 2: // MODEL
          return MODEL;
        case 3: // ECG
          return ECG;
        case 4: // BLOODPRESSURE
          return BLOODPRESSURE;
        case 5: // HEARTRATE
          return HEARTRATE;
        case 6: // TIMESTAMP
          return TIMESTAMP;
        case 7: // TIMEZONE
          return TIMEZONE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODEL_ISSET_ID = 0;
  private static final int __HEARTRATE_ISSET_ID = 1;
  private static final int __TIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICEID, new org.apache.thrift.meta_data.FieldMetaData("deviceid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ECG, new org.apache.thrift.meta_data.FieldMetaData("ecg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EcgThrift.class)));
    tmpMap.put(_Fields.BLOODPRESSURE, new org.apache.thrift.meta_data.FieldMetaData("bloodpressure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BloodPressureThrift.class)));
    tmpMap.put(_Fields.HEARTRATE, new org.apache.thrift.meta_data.FieldMetaData("heartrate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIMEZONE, new org.apache.thrift.meta_data.FieldMetaData("timezone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SeriesThrift.class, metaDataMap);
  }

  public SeriesThrift() {
  }

  public SeriesThrift(
    java.lang.String deviceid,
    int model,
    EcgThrift ecg,
    BloodPressureThrift bloodpressure,
    int heartrate,
    long timestamp,
    java.lang.String timezone)
  {
    this();
    this.deviceid = deviceid;
    this.model = model;
    setModelIsSet(true);
    this.ecg = ecg;
    this.bloodpressure = bloodpressure;
    this.heartrate = heartrate;
    setHeartrateIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.timezone = timezone;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SeriesThrift(SeriesThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDeviceid()) {
      this.deviceid = other.deviceid;
    }
    this.model = other.model;
    if (other.isSetEcg()) {
      this.ecg = new EcgThrift(other.ecg);
    }
    if (other.isSetBloodpressure()) {
      this.bloodpressure = new BloodPressureThrift(other.bloodpressure);
    }
    this.heartrate = other.heartrate;
    this.timestamp = other.timestamp;
    if (other.isSetTimezone()) {
      this.timezone = other.timezone;
    }
  }

  @Override
  public SeriesThrift deepCopy() {
    return new SeriesThrift(this);
  }

  @Override
  public void clear() {
    this.deviceid = null;
    setModelIsSet(false);
    this.model = 0;
    this.ecg = null;
    this.bloodpressure = null;
    setHeartrateIsSet(false);
    this.heartrate = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.timezone = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDeviceid() {
    return this.deviceid;
  }

  public SeriesThrift setDeviceid(@org.apache.thrift.annotation.Nullable java.lang.String deviceid) {
    this.deviceid = deviceid;
    return this;
  }

  public void unsetDeviceid() {
    this.deviceid = null;
  }

  /** Returns true if field deviceid is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceid() {
    return this.deviceid != null;
  }

  public void setDeviceidIsSet(boolean value) {
    if (!value) {
      this.deviceid = null;
    }
  }

  public int getModel() {
    return this.model;
  }

  public SeriesThrift setModel(int model) {
    this.model = model;
    setModelIsSet(true);
    return this;
  }

  public void unsetModel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODEL_ISSET_ID);
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODEL_ISSET_ID);
  }

  public void setModelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODEL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public EcgThrift getEcg() {
    return this.ecg;
  }

  public SeriesThrift setEcg(@org.apache.thrift.annotation.Nullable EcgThrift ecg) {
    this.ecg = ecg;
    return this;
  }

  public void unsetEcg() {
    this.ecg = null;
  }

  /** Returns true if field ecg is set (has been assigned a value) and false otherwise */
  public boolean isSetEcg() {
    return this.ecg != null;
  }

  public void setEcgIsSet(boolean value) {
    if (!value) {
      this.ecg = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public BloodPressureThrift getBloodpressure() {
    return this.bloodpressure;
  }

  public SeriesThrift setBloodpressure(@org.apache.thrift.annotation.Nullable BloodPressureThrift bloodpressure) {
    this.bloodpressure = bloodpressure;
    return this;
  }

  public void unsetBloodpressure() {
    this.bloodpressure = null;
  }

  /** Returns true if field bloodpressure is set (has been assigned a value) and false otherwise */
  public boolean isSetBloodpressure() {
    return this.bloodpressure != null;
  }

  public void setBloodpressureIsSet(boolean value) {
    if (!value) {
      this.bloodpressure = null;
    }
  }

  public int getHeartrate() {
    return this.heartrate;
  }

  public SeriesThrift setHeartrate(int heartrate) {
    this.heartrate = heartrate;
    setHeartrateIsSet(true);
    return this;
  }

  public void unsetHeartrate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEARTRATE_ISSET_ID);
  }

  /** Returns true if field heartrate is set (has been assigned a value) and false otherwise */
  public boolean isSetHeartrate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEARTRATE_ISSET_ID);
  }

  public void setHeartrateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEARTRATE_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public SeriesThrift setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTimezone() {
    return this.timezone;
  }

  public SeriesThrift setTimezone(@org.apache.thrift.annotation.Nullable java.lang.String timezone) {
    this.timezone = timezone;
    return this;
  }

  public void unsetTimezone() {
    this.timezone = null;
  }

  /** Returns true if field timezone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimezone() {
    return this.timezone != null;
  }

  public void setTimezoneIsSet(boolean value) {
    if (!value) {
      this.timezone = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DEVICEID:
      if (value == null) {
        unsetDeviceid();
      } else {
        setDeviceid((java.lang.String)value);
      }
      break;

    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((java.lang.Integer)value);
      }
      break;

    case ECG:
      if (value == null) {
        unsetEcg();
      } else {
        setEcg((EcgThrift)value);
      }
      break;

    case BLOODPRESSURE:
      if (value == null) {
        unsetBloodpressure();
      } else {
        setBloodpressure((BloodPressureThrift)value);
      }
      break;

    case HEARTRATE:
      if (value == null) {
        unsetHeartrate();
      } else {
        setHeartrate((java.lang.Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case TIMEZONE:
      if (value == null) {
        unsetTimezone();
      } else {
        setTimezone((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICEID:
      return getDeviceid();

    case MODEL:
      return getModel();

    case ECG:
      return getEcg();

    case BLOODPRESSURE:
      return getBloodpressure();

    case HEARTRATE:
      return getHeartrate();

    case TIMESTAMP:
      return getTimestamp();

    case TIMEZONE:
      return getTimezone();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DEVICEID:
      return isSetDeviceid();
    case MODEL:
      return isSetModel();
    case ECG:
      return isSetEcg();
    case BLOODPRESSURE:
      return isSetBloodpressure();
    case HEARTRATE:
      return isSetHeartrate();
    case TIMESTAMP:
      return isSetTimestamp();
    case TIMEZONE:
      return isSetTimezone();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SeriesThrift)
      return this.equals((SeriesThrift)that);
    return false;
  }

  public boolean equals(SeriesThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_deviceid = true && this.isSetDeviceid();
    boolean that_present_deviceid = true && that.isSetDeviceid();
    if (this_present_deviceid || that_present_deviceid) {
      if (!(this_present_deviceid && that_present_deviceid))
        return false;
      if (!this.deviceid.equals(that.deviceid))
        return false;
    }

    boolean this_present_model = true;
    boolean that_present_model = true;
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (this.model != that.model)
        return false;
    }

    boolean this_present_ecg = true && this.isSetEcg();
    boolean that_present_ecg = true && that.isSetEcg();
    if (this_present_ecg || that_present_ecg) {
      if (!(this_present_ecg && that_present_ecg))
        return false;
      if (!this.ecg.equals(that.ecg))
        return false;
    }

    boolean this_present_bloodpressure = true && this.isSetBloodpressure();
    boolean that_present_bloodpressure = true && that.isSetBloodpressure();
    if (this_present_bloodpressure || that_present_bloodpressure) {
      if (!(this_present_bloodpressure && that_present_bloodpressure))
        return false;
      if (!this.bloodpressure.equals(that.bloodpressure))
        return false;
    }

    boolean this_present_heartrate = true;
    boolean that_present_heartrate = true;
    if (this_present_heartrate || that_present_heartrate) {
      if (!(this_present_heartrate && that_present_heartrate))
        return false;
      if (this.heartrate != that.heartrate)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_timezone = true && this.isSetTimezone();
    boolean that_present_timezone = true && that.isSetTimezone();
    if (this_present_timezone || that_present_timezone) {
      if (!(this_present_timezone && that_present_timezone))
        return false;
      if (!this.timezone.equals(that.timezone))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDeviceid()) ? 131071 : 524287);
    if (isSetDeviceid())
      hashCode = hashCode * 8191 + deviceid.hashCode();

    hashCode = hashCode * 8191 + model;

    hashCode = hashCode * 8191 + ((isSetEcg()) ? 131071 : 524287);
    if (isSetEcg())
      hashCode = hashCode * 8191 + ecg.hashCode();

    hashCode = hashCode * 8191 + ((isSetBloodpressure()) ? 131071 : 524287);
    if (isSetBloodpressure())
      hashCode = hashCode * 8191 + bloodpressure.hashCode();

    hashCode = hashCode * 8191 + heartrate;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetTimezone()) ? 131071 : 524287);
    if (isSetTimezone())
      hashCode = hashCode * 8191 + timezone.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SeriesThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDeviceid(), other.isSetDeviceid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceid, other.deviceid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetModel(), other.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEcg(), other.isSetEcg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecg, other.ecg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBloodpressure(), other.isSetBloodpressure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBloodpressure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloodpressure, other.bloodpressure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHeartrate(), other.isSetHeartrate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeartrate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartrate, other.heartrate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimezone(), other.isSetTimezone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimezone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timezone, other.timezone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SeriesThrift(");
    boolean first = true;

    sb.append("deviceid:");
    if (this.deviceid == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model:");
    sb.append(this.model);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecg:");
    if (this.ecg == null) {
      sb.append("null");
    } else {
      sb.append(this.ecg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bloodpressure:");
    if (this.bloodpressure == null) {
      sb.append("null");
    } else {
      sb.append(this.bloodpressure);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("heartrate:");
    sb.append(this.heartrate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timezone:");
    if (this.timezone == null) {
      sb.append("null");
    } else {
      sb.append(this.timezone);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (ecg != null) {
      ecg.validate();
    }
    if (bloodpressure != null) {
      bloodpressure.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SeriesThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SeriesThriftStandardScheme getScheme() {
      return new SeriesThriftStandardScheme();
    }
  }

  private static class SeriesThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<SeriesThrift> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SeriesThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICEID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceid = iprot.readString();
              struct.setDeviceidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.model = iprot.readI32();
              struct.setModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ECG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ecg = new EcgThrift();
              struct.ecg.read(iprot);
              struct.setEcgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BLOODPRESSURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bloodpressure = new BloodPressureThrift();
              struct.bloodpressure.read(iprot);
              struct.setBloodpressureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HEARTRATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heartrate = iprot.readI32();
              struct.setHeartrateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIMEZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timezone = iprot.readString();
              struct.setTimezoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SeriesThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.deviceid != null) {
        oprot.writeFieldBegin(DEVICEID_FIELD_DESC);
        oprot.writeString(struct.deviceid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MODEL_FIELD_DESC);
      oprot.writeI32(struct.model);
      oprot.writeFieldEnd();
      if (struct.ecg != null) {
        oprot.writeFieldBegin(ECG_FIELD_DESC);
        struct.ecg.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.bloodpressure != null) {
        oprot.writeFieldBegin(BLOODPRESSURE_FIELD_DESC);
        struct.bloodpressure.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HEARTRATE_FIELD_DESC);
      oprot.writeI32(struct.heartrate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.timezone != null) {
        oprot.writeFieldBegin(TIMEZONE_FIELD_DESC);
        oprot.writeString(struct.timezone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SeriesThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SeriesThriftTupleScheme getScheme() {
      return new SeriesThriftTupleScheme();
    }
  }

  private static class SeriesThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<SeriesThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SeriesThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDeviceid()) {
        optionals.set(0);
      }
      if (struct.isSetModel()) {
        optionals.set(1);
      }
      if (struct.isSetEcg()) {
        optionals.set(2);
      }
      if (struct.isSetBloodpressure()) {
        optionals.set(3);
      }
      if (struct.isSetHeartrate()) {
        optionals.set(4);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetTimezone()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetDeviceid()) {
        oprot.writeString(struct.deviceid);
      }
      if (struct.isSetModel()) {
        oprot.writeI32(struct.model);
      }
      if (struct.isSetEcg()) {
        struct.ecg.write(oprot);
      }
      if (struct.isSetBloodpressure()) {
        struct.bloodpressure.write(oprot);
      }
      if (struct.isSetHeartrate()) {
        oprot.writeI32(struct.heartrate);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetTimezone()) {
        oprot.writeString(struct.timezone);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SeriesThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.deviceid = iprot.readString();
        struct.setDeviceidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.model = iprot.readI32();
        struct.setModelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ecg = new EcgThrift();
        struct.ecg.read(iprot);
        struct.setEcgIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bloodpressure = new BloodPressureThrift();
        struct.bloodpressure.read(iprot);
        struct.setBloodpressureIsSet(true);
      }
      if (incoming.get(4)) {
        struct.heartrate = iprot.readI32();
        struct.setHeartrateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.timezone = iprot.readString();
        struct.setTimezoneIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

