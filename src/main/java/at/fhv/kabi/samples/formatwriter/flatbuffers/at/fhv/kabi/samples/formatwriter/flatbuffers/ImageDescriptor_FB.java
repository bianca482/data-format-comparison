// automatically generated by the FlatBuffers compiler, do not modify

package at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ImageDescriptor_FB extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static ImageDescriptor_FB getRootAsImageDescriptor_FB(ByteBuffer _bb) { return getRootAsImageDescriptor_FB(_bb, new ImageDescriptor_FB()); }
  public static ImageDescriptor_FB getRootAsImageDescriptor_FB(ByteBuffer _bb, ImageDescriptor_FB obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ImageDescriptor_FB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String title() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer titleAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer titleInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String description() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int type() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String url() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer urlAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer urlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public int width() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int height() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String tags(int j) { int o = __offset(16); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createImageDescriptor_FB(FlatBufferBuilder builder,
      int titleOffset,
      int descriptionOffset,
      int type,
      int urlOffset,
      int width,
      int height,
      int tagsOffset) {
    builder.startTable(7);
    ImageDescriptor_FB.addTags(builder, tagsOffset);
    ImageDescriptor_FB.addHeight(builder, height);
    ImageDescriptor_FB.addWidth(builder, width);
    ImageDescriptor_FB.addUrl(builder, urlOffset);
    ImageDescriptor_FB.addType(builder, type);
    ImageDescriptor_FB.addDescription(builder, descriptionOffset);
    ImageDescriptor_FB.addTitle(builder, titleOffset);
    return ImageDescriptor_FB.endImageDescriptor_FB(builder);
  }

  public static void startImageDescriptor_FB(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addTitle(FlatBufferBuilder builder, int titleOffset) { builder.addOffset(0, titleOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(1, descriptionOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addInt(2, type, 0); }
  public static void addUrl(FlatBufferBuilder builder, int urlOffset) { builder.addOffset(3, urlOffset, 0); }
  public static void addWidth(FlatBufferBuilder builder, int width) { builder.addInt(4, width, 0); }
  public static void addHeight(FlatBufferBuilder builder, int height) { builder.addInt(5, height, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(6, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endImageDescriptor_FB(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ImageDescriptor_FB get(int j) { return get(new ImageDescriptor_FB(), j); }
    public ImageDescriptor_FB get(ImageDescriptor_FB obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

