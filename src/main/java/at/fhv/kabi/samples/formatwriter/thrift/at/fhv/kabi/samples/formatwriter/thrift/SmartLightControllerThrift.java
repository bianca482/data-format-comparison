/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.fhv.kabi.samples.formatwriter.thrift.at.fhv.kabi.samples.formatwriter.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-02-11")
public class SmartLightControllerThrift implements org.apache.thrift.TBase<SmartLightControllerThrift, SmartLightControllerThrift._Fields>, java.io.Serializable, Cloneable, Comparable<SmartLightControllerThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SmartLightControllerThrift");

  private static final org.apache.thrift.protocol.TField ON_FIELD_DESC = new org.apache.thrift.protocol.TField("on", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField SAT_FIELD_DESC = new org.apache.thrift.protocol.TField("sat", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BRI_FIELD_DESC = new org.apache.thrift.protocol.TField("bri", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HUE_FIELD_DESC = new org.apache.thrift.protocol.TField("hue", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SmartLightControllerThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SmartLightControllerThriftTupleSchemeFactory();

  public boolean on; // required
  public int sat; // required
  public int bri; // required
  public int hue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ON((short)1, "on"),
    SAT((short)2, "sat"),
    BRI((short)3, "bri"),
    HUE((short)4, "hue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ON
          return ON;
        case 2: // SAT
          return SAT;
        case 3: // BRI
          return BRI;
        case 4: // HUE
          return HUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ON_ISSET_ID = 0;
  private static final int __SAT_ISSET_ID = 1;
  private static final int __BRI_ISSET_ID = 2;
  private static final int __HUE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ON, new org.apache.thrift.meta_data.FieldMetaData("on", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SAT, new org.apache.thrift.meta_data.FieldMetaData("sat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRI, new org.apache.thrift.meta_data.FieldMetaData("bri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HUE, new org.apache.thrift.meta_data.FieldMetaData("hue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SmartLightControllerThrift.class, metaDataMap);
  }

  public SmartLightControllerThrift() {
  }

  public SmartLightControllerThrift(
    boolean on,
    int sat,
    int bri,
    int hue)
  {
    this();
    this.on = on;
    setOnIsSet(true);
    this.sat = sat;
    setSatIsSet(true);
    this.bri = bri;
    setBriIsSet(true);
    this.hue = hue;
    setHueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SmartLightControllerThrift(SmartLightControllerThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.on = other.on;
    this.sat = other.sat;
    this.bri = other.bri;
    this.hue = other.hue;
  }

  @Override
  public SmartLightControllerThrift deepCopy() {
    return new SmartLightControllerThrift(this);
  }

  @Override
  public void clear() {
    setOnIsSet(false);
    this.on = false;
    setSatIsSet(false);
    this.sat = 0;
    setBriIsSet(false);
    this.bri = 0;
    setHueIsSet(false);
    this.hue = 0;
  }

  public boolean isOn() {
    return this.on;
  }

  public SmartLightControllerThrift setOn(boolean on) {
    this.on = on;
    setOnIsSet(true);
    return this;
  }

  public void unsetOn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ON_ISSET_ID);
  }

  /** Returns true if field on is set (has been assigned a value) and false otherwise */
  public boolean isSetOn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ON_ISSET_ID);
  }

  public void setOnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ON_ISSET_ID, value);
  }

  public int getSat() {
    return this.sat;
  }

  public SmartLightControllerThrift setSat(int sat) {
    this.sat = sat;
    setSatIsSet(true);
    return this;
  }

  public void unsetSat() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAT_ISSET_ID);
  }

  /** Returns true if field sat is set (has been assigned a value) and false otherwise */
  public boolean isSetSat() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAT_ISSET_ID);
  }

  public void setSatIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAT_ISSET_ID, value);
  }

  public int getBri() {
    return this.bri;
  }

  public SmartLightControllerThrift setBri(int bri) {
    this.bri = bri;
    setBriIsSet(true);
    return this;
  }

  public void unsetBri() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BRI_ISSET_ID);
  }

  /** Returns true if field bri is set (has been assigned a value) and false otherwise */
  public boolean isSetBri() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BRI_ISSET_ID);
  }

  public void setBriIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BRI_ISSET_ID, value);
  }

  public int getHue() {
    return this.hue;
  }

  public SmartLightControllerThrift setHue(int hue) {
    this.hue = hue;
    setHueIsSet(true);
    return this;
  }

  public void unsetHue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HUE_ISSET_ID);
  }

  /** Returns true if field hue is set (has been assigned a value) and false otherwise */
  public boolean isSetHue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HUE_ISSET_ID);
  }

  public void setHueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HUE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ON:
      if (value == null) {
        unsetOn();
      } else {
        setOn((java.lang.Boolean)value);
      }
      break;

    case SAT:
      if (value == null) {
        unsetSat();
      } else {
        setSat((java.lang.Integer)value);
      }
      break;

    case BRI:
      if (value == null) {
        unsetBri();
      } else {
        setBri((java.lang.Integer)value);
      }
      break;

    case HUE:
      if (value == null) {
        unsetHue();
      } else {
        setHue((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ON:
      return isOn();

    case SAT:
      return getSat();

    case BRI:
      return getBri();

    case HUE:
      return getHue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ON:
      return isSetOn();
    case SAT:
      return isSetSat();
    case BRI:
      return isSetBri();
    case HUE:
      return isSetHue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SmartLightControllerThrift)
      return this.equals((SmartLightControllerThrift)that);
    return false;
  }

  public boolean equals(SmartLightControllerThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_on = true;
    boolean that_present_on = true;
    if (this_present_on || that_present_on) {
      if (!(this_present_on && that_present_on))
        return false;
      if (this.on != that.on)
        return false;
    }

    boolean this_present_sat = true;
    boolean that_present_sat = true;
    if (this_present_sat || that_present_sat) {
      if (!(this_present_sat && that_present_sat))
        return false;
      if (this.sat != that.sat)
        return false;
    }

    boolean this_present_bri = true;
    boolean that_present_bri = true;
    if (this_present_bri || that_present_bri) {
      if (!(this_present_bri && that_present_bri))
        return false;
      if (this.bri != that.bri)
        return false;
    }

    boolean this_present_hue = true;
    boolean that_present_hue = true;
    if (this_present_hue || that_present_hue) {
      if (!(this_present_hue && that_present_hue))
        return false;
      if (this.hue != that.hue)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((on) ? 131071 : 524287);

    hashCode = hashCode * 8191 + sat;

    hashCode = hashCode * 8191 + bri;

    hashCode = hashCode * 8191 + hue;

    return hashCode;
  }

  @Override
  public int compareTo(SmartLightControllerThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetOn(), other.isSetOn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.on, other.on);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSat(), other.isSetSat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sat, other.sat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBri(), other.isSetBri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bri, other.bri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHue(), other.isSetHue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hue, other.hue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SmartLightControllerThrift(");
    boolean first = true;

    sb.append("on:");
    sb.append(this.on);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sat:");
    sb.append(this.sat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bri:");
    sb.append(this.bri);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hue:");
    sb.append(this.hue);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SmartLightControllerThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SmartLightControllerThriftStandardScheme getScheme() {
      return new SmartLightControllerThriftStandardScheme();
    }
  }

  private static class SmartLightControllerThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<SmartLightControllerThrift> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SmartLightControllerThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ON
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.on = iprot.readBool();
              struct.setOnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sat = iprot.readI32();
              struct.setSatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BRI
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bri = iprot.readI32();
              struct.setBriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hue = iprot.readI32();
              struct.setHueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SmartLightControllerThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ON_FIELD_DESC);
      oprot.writeBool(struct.on);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SAT_FIELD_DESC);
      oprot.writeI32(struct.sat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BRI_FIELD_DESC);
      oprot.writeI32(struct.bri);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HUE_FIELD_DESC);
      oprot.writeI32(struct.hue);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SmartLightControllerThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SmartLightControllerThriftTupleScheme getScheme() {
      return new SmartLightControllerThriftTupleScheme();
    }
  }

  private static class SmartLightControllerThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<SmartLightControllerThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SmartLightControllerThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOn()) {
        optionals.set(0);
      }
      if (struct.isSetSat()) {
        optionals.set(1);
      }
      if (struct.isSetBri()) {
        optionals.set(2);
      }
      if (struct.isSetHue()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOn()) {
        oprot.writeBool(struct.on);
      }
      if (struct.isSetSat()) {
        oprot.writeI32(struct.sat);
      }
      if (struct.isSetBri()) {
        oprot.writeI32(struct.bri);
      }
      if (struct.isSetHue()) {
        oprot.writeI32(struct.hue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SmartLightControllerThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.on = iprot.readBool();
        struct.setOnIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sat = iprot.readI32();
        struct.setSatIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bri = iprot.readI32();
        struct.setBriIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hue = iprot.readI32();
        struct.setHueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

