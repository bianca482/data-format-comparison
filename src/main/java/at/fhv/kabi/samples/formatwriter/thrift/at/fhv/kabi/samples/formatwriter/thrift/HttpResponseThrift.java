/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.fhv.kabi.samples.formatwriter.thrift.at.fhv.kabi.samples.formatwriter.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-02-11")
public class HttpResponseThrift implements org.apache.thrift.TBase<HttpResponseThrift, HttpResponseThrift._Fields>, java.io.Serializable, Cloneable, Comparable<HttpResponseThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HttpResponseThrift");

  private static final org.apache.thrift.protocol.TField STATUS_LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusLine", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HEADER_LINES_FIELD_DESC = new org.apache.thrift.protocol.TField("headerLines", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField RESPONSE_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("responseBody", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HttpResponseThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HttpResponseThriftTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String statusLine; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> headerLines; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String responseBody; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS_LINE((short)1, "statusLine"),
    HEADER_LINES((short)2, "headerLines"),
    RESPONSE_BODY((short)3, "responseBody");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS_LINE
          return STATUS_LINE;
        case 2: // HEADER_LINES
          return HEADER_LINES;
        case 3: // RESPONSE_BODY
          return RESPONSE_BODY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS_LINE, new org.apache.thrift.meta_data.FieldMetaData("statusLine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADER_LINES, new org.apache.thrift.meta_data.FieldMetaData("headerLines", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RESPONSE_BODY, new org.apache.thrift.meta_data.FieldMetaData("responseBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HttpResponseThrift.class, metaDataMap);
  }

  public HttpResponseThrift() {
  }

  public HttpResponseThrift(
    java.lang.String statusLine,
    java.util.List<java.lang.String> headerLines,
    java.lang.String responseBody)
  {
    this();
    this.statusLine = statusLine;
    this.headerLines = headerLines;
    this.responseBody = responseBody;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HttpResponseThrift(HttpResponseThrift other) {
    if (other.isSetStatusLine()) {
      this.statusLine = other.statusLine;
    }
    if (other.isSetHeaderLines()) {
      java.util.List<java.lang.String> __this__headerLines = new java.util.ArrayList<java.lang.String>(other.headerLines);
      this.headerLines = __this__headerLines;
    }
    if (other.isSetResponseBody()) {
      this.responseBody = other.responseBody;
    }
  }

  @Override
  public HttpResponseThrift deepCopy() {
    return new HttpResponseThrift(this);
  }

  @Override
  public void clear() {
    this.statusLine = null;
    this.headerLines = null;
    this.responseBody = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStatusLine() {
    return this.statusLine;
  }

  public HttpResponseThrift setStatusLine(@org.apache.thrift.annotation.Nullable java.lang.String statusLine) {
    this.statusLine = statusLine;
    return this;
  }

  public void unsetStatusLine() {
    this.statusLine = null;
  }

  /** Returns true if field statusLine is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusLine() {
    return this.statusLine != null;
  }

  public void setStatusLineIsSet(boolean value) {
    if (!value) {
      this.statusLine = null;
    }
  }

  public int getHeaderLinesSize() {
    return (this.headerLines == null) ? 0 : this.headerLines.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getHeaderLinesIterator() {
    return (this.headerLines == null) ? null : this.headerLines.iterator();
  }

  public void addToHeaderLines(java.lang.String elem) {
    if (this.headerLines == null) {
      this.headerLines = new java.util.ArrayList<java.lang.String>();
    }
    this.headerLines.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getHeaderLines() {
    return this.headerLines;
  }

  public HttpResponseThrift setHeaderLines(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> headerLines) {
    this.headerLines = headerLines;
    return this;
  }

  public void unsetHeaderLines() {
    this.headerLines = null;
  }

  /** Returns true if field headerLines is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaderLines() {
    return this.headerLines != null;
  }

  public void setHeaderLinesIsSet(boolean value) {
    if (!value) {
      this.headerLines = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getResponseBody() {
    return this.responseBody;
  }

  public HttpResponseThrift setResponseBody(@org.apache.thrift.annotation.Nullable java.lang.String responseBody) {
    this.responseBody = responseBody;
    return this;
  }

  public void unsetResponseBody() {
    this.responseBody = null;
  }

  /** Returns true if field responseBody is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseBody() {
    return this.responseBody != null;
  }

  public void setResponseBodyIsSet(boolean value) {
    if (!value) {
      this.responseBody = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATUS_LINE:
      if (value == null) {
        unsetStatusLine();
      } else {
        setStatusLine((java.lang.String)value);
      }
      break;

    case HEADER_LINES:
      if (value == null) {
        unsetHeaderLines();
      } else {
        setHeaderLines((java.util.List<java.lang.String>)value);
      }
      break;

    case RESPONSE_BODY:
      if (value == null) {
        unsetResponseBody();
      } else {
        setResponseBody((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS_LINE:
      return getStatusLine();

    case HEADER_LINES:
      return getHeaderLines();

    case RESPONSE_BODY:
      return getResponseBody();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS_LINE:
      return isSetStatusLine();
    case HEADER_LINES:
      return isSetHeaderLines();
    case RESPONSE_BODY:
      return isSetResponseBody();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof HttpResponseThrift)
      return this.equals((HttpResponseThrift)that);
    return false;
  }

  public boolean equals(HttpResponseThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_statusLine = true && this.isSetStatusLine();
    boolean that_present_statusLine = true && that.isSetStatusLine();
    if (this_present_statusLine || that_present_statusLine) {
      if (!(this_present_statusLine && that_present_statusLine))
        return false;
      if (!this.statusLine.equals(that.statusLine))
        return false;
    }

    boolean this_present_headerLines = true && this.isSetHeaderLines();
    boolean that_present_headerLines = true && that.isSetHeaderLines();
    if (this_present_headerLines || that_present_headerLines) {
      if (!(this_present_headerLines && that_present_headerLines))
        return false;
      if (!this.headerLines.equals(that.headerLines))
        return false;
    }

    boolean this_present_responseBody = true && this.isSetResponseBody();
    boolean that_present_responseBody = true && that.isSetResponseBody();
    if (this_present_responseBody || that_present_responseBody) {
      if (!(this_present_responseBody && that_present_responseBody))
        return false;
      if (!this.responseBody.equals(that.responseBody))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatusLine()) ? 131071 : 524287);
    if (isSetStatusLine())
      hashCode = hashCode * 8191 + statusLine.hashCode();

    hashCode = hashCode * 8191 + ((isSetHeaderLines()) ? 131071 : 524287);
    if (isSetHeaderLines())
      hashCode = hashCode * 8191 + headerLines.hashCode();

    hashCode = hashCode * 8191 + ((isSetResponseBody()) ? 131071 : 524287);
    if (isSetResponseBody())
      hashCode = hashCode * 8191 + responseBody.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HttpResponseThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatusLine(), other.isSetStatusLine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusLine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusLine, other.statusLine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHeaderLines(), other.isSetHeaderLines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaderLines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerLines, other.headerLines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResponseBody(), other.isSetResponseBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseBody, other.responseBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HttpResponseThrift(");
    boolean first = true;

    sb.append("statusLine:");
    if (this.statusLine == null) {
      sb.append("null");
    } else {
      sb.append(this.statusLine);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("headerLines:");
    if (this.headerLines == null) {
      sb.append("null");
    } else {
      sb.append(this.headerLines);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseBody:");
    if (this.responseBody == null) {
      sb.append("null");
    } else {
      sb.append(this.responseBody);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HttpResponseThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public HttpResponseThriftStandardScheme getScheme() {
      return new HttpResponseThriftStandardScheme();
    }
  }

  private static class HttpResponseThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<HttpResponseThrift> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, HttpResponseThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS_LINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusLine = iprot.readString();
              struct.setStatusLineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEADER_LINES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.headerLines = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.headerLines.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setHeaderLinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESPONSE_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.responseBody = iprot.readString();
              struct.setResponseBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, HttpResponseThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.statusLine != null) {
        oprot.writeFieldBegin(STATUS_LINE_FIELD_DESC);
        oprot.writeString(struct.statusLine);
        oprot.writeFieldEnd();
      }
      if (struct.headerLines != null) {
        oprot.writeFieldBegin(HEADER_LINES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.headerLines.size()));
          for (java.lang.String _iter3 : struct.headerLines)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.responseBody != null) {
        oprot.writeFieldBegin(RESPONSE_BODY_FIELD_DESC);
        oprot.writeString(struct.responseBody);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HttpResponseThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public HttpResponseThriftTupleScheme getScheme() {
      return new HttpResponseThriftTupleScheme();
    }
  }

  private static class HttpResponseThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<HttpResponseThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HttpResponseThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatusLine()) {
        optionals.set(0);
      }
      if (struct.isSetHeaderLines()) {
        optionals.set(1);
      }
      if (struct.isSetResponseBody()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStatusLine()) {
        oprot.writeString(struct.statusLine);
      }
      if (struct.isSetHeaderLines()) {
        {
          oprot.writeI32(struct.headerLines.size());
          for (java.lang.String _iter4 : struct.headerLines)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetResponseBody()) {
        oprot.writeString(struct.responseBody);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HttpResponseThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.statusLine = iprot.readString();
        struct.setStatusLineIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.headerLines = new java.util.ArrayList<java.lang.String>(_list5.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.headerLines.add(_elem6);
          }
        }
        struct.setHeaderLinesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.responseBody = iprot.readString();
        struct.setResponseBodyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

