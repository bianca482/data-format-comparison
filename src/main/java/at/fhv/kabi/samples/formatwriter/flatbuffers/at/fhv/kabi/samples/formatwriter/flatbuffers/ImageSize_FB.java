// automatically generated by the FlatBuffers compiler, do not modify

package at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ImageSize_FB extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static ImageSize_FB getRootAsImageSize_FB(ByteBuffer _bb) { return getRootAsImageSize_FB(_bb, new ImageSize_FB()); }
  public static ImageSize_FB getRootAsImageSize_FB(ByteBuffer _bb, ImageSize_FB obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ImageSize_FB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int width() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int height() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String unit() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unitAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer unitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createImageSize_FB(FlatBufferBuilder builder,
      int width,
      int height,
      int unitOffset) {
    builder.startTable(3);
    ImageSize_FB.addUnit(builder, unitOffset);
    ImageSize_FB.addHeight(builder, height);
    ImageSize_FB.addWidth(builder, width);
    return ImageSize_FB.endImageSize_FB(builder);
  }

  public static void startImageSize_FB(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addWidth(FlatBufferBuilder builder, int width) { builder.addInt(0, width, 0); }
  public static void addHeight(FlatBufferBuilder builder, int height) { builder.addInt(1, height, 0); }
  public static void addUnit(FlatBufferBuilder builder, int unitOffset) { builder.addOffset(2, unitOffset, 0); }
  public static int endImageSize_FB(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ImageSize_FB get(int j) { return get(new ImageSize_FB(), j); }
    public ImageSize_FB get(ImageSize_FB obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

