// automatically generated by the FlatBuffers compiler, do not modify

package at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Body_FB extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Body_FB getRootAsBody_FB(ByteBuffer _bb) { return getRootAsBody_FB(_bb, new Body_FB()); }
  public static Body_FB getRootAsBody_FB(ByteBuffer _bb, Body_FB obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Body_FB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.Series_FB series(int j) { return series(new at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.Series_FB(), j); }
  public at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.Series_FB series(at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.Series_FB obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int seriesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.Series_FB.Vector seriesVector() { return seriesVector(new at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.Series_FB.Vector()); }
  public at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.Series_FB.Vector seriesVector(at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers.Series_FB.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public boolean more() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int offset() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createBody_FB(FlatBufferBuilder builder,
      int seriesOffset,
      boolean more,
      int offset) {
    builder.startTable(3);
    Body_FB.addOffset(builder, offset);
    Body_FB.addSeries(builder, seriesOffset);
    Body_FB.addMore(builder, more);
    return Body_FB.endBody_FB(builder);
  }

  public static void startBody_FB(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addSeries(FlatBufferBuilder builder, int seriesOffset) { builder.addOffset(0, seriesOffset, 0); }
  public static int createSeriesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSeriesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMore(FlatBufferBuilder builder, boolean more) { builder.addBoolean(1, more, false); }
  public static void addOffset(FlatBufferBuilder builder, int offset) { builder.addInt(2, offset, 0); }
  public static int endBody_FB(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Body_FB get(int j) { return get(new Body_FB(), j); }
    public Body_FB get(Body_FB obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

