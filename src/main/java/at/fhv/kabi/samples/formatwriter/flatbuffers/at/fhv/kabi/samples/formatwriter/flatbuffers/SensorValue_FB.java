// automatically generated by the FlatBuffers compiler, do not modify

package at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SensorValue_FB extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SensorValue_FB getRootAsSensorValue_FB(ByteBuffer _bb) { return getRootAsSensorValue_FB(_bb, new SensorValue_FB()); }
  public static SensorValue_FB getRootAsSensorValue_FB(ByteBuffer _bb, SensorValue_FB obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SensorValue_FB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String deviceId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer deviceIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer deviceIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long timestamp() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public double temperature() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double humidity() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createSensorValue_FB(FlatBufferBuilder builder,
      int deviceIdOffset,
      long timestamp,
      double temperature,
      double humidity) {
    builder.startTable(4);
    SensorValue_FB.addHumidity(builder, humidity);
    SensorValue_FB.addTemperature(builder, temperature);
    SensorValue_FB.addTimestamp(builder, timestamp);
    SensorValue_FB.addDeviceId(builder, deviceIdOffset);
    return SensorValue_FB.endSensorValue_FB(builder);
  }

  public static void startSensorValue_FB(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addDeviceId(FlatBufferBuilder builder, int deviceIdOffset) { builder.addOffset(0, deviceIdOffset, 0); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(1, timestamp, 0L); }
  public static void addTemperature(FlatBufferBuilder builder, double temperature) { builder.addDouble(2, temperature, 0.0); }
  public static void addHumidity(FlatBufferBuilder builder, double humidity) { builder.addDouble(3, humidity, 0.0); }
  public static int endSensorValue_FB(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSensorValue_FBBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedSensorValue_FBBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SensorValue_FB get(int j) { return get(new SensorValue_FB(), j); }
    public SensorValue_FB get(SensorValue_FB obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

