// automatically generated by the FlatBuffers compiler, do not modify

package at.fhv.kabi.samples.formatwriter.flatbuffers.at.fhv.kabi.samples.formatwriter.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class HttpResponse_FB extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static HttpResponse_FB getRootAsHttpResponse_FB(ByteBuffer _bb) { return getRootAsHttpResponse_FB(_bb, new HttpResponse_FB()); }
  public static HttpResponse_FB getRootAsHttpResponse_FB(ByteBuffer _bb, HttpResponse_FB obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public HttpResponse_FB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String statusLine() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer statusLineAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer statusLineInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String headerLines(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int headerLinesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public StringVector headerLinesVector() { return headerLinesVector(new StringVector()); }
  public StringVector headerLinesVector(StringVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String responseBody() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer responseBodyAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer responseBodyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createHttpResponse_FB(FlatBufferBuilder builder,
      int statusLineOffset,
      int headerLinesOffset,
      int responseBodyOffset) {
    builder.startTable(3);
    HttpResponse_FB.addResponseBody(builder, responseBodyOffset);
    HttpResponse_FB.addHeaderLines(builder, headerLinesOffset);
    HttpResponse_FB.addStatusLine(builder, statusLineOffset);
    return HttpResponse_FB.endHttpResponse_FB(builder);
  }

  public static void startHttpResponse_FB(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addStatusLine(FlatBufferBuilder builder, int statusLineOffset) { builder.addOffset(0, statusLineOffset, 0); }
  public static void addHeaderLines(FlatBufferBuilder builder, int headerLinesOffset) { builder.addOffset(1, headerLinesOffset, 0); }
  public static int createHeaderLinesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startHeaderLinesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addResponseBody(FlatBufferBuilder builder, int responseBodyOffset) { builder.addOffset(2, responseBodyOffset, 0); }
  public static int endHttpResponse_FB(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishHttpResponse_FBBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedHttpResponse_FBBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public HttpResponse_FB get(int j) { return get(new HttpResponse_FB(), j); }
    public HttpResponse_FB get(HttpResponse_FB obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

